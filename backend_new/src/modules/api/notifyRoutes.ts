import { Router, Request, Response } from 'express';
import { eventBus } from '../../core/eventBus';
import { logger } from '../../core/logger';

const router = Router();

router.post('/notify', (req: Request, res: Response) => {
    try {
        const { event, symbol, side, volume, price, pnlPoints } = req.body;
        logger.info(`[Notify Route] Recebido evento de notifica√ß√£o:`, req.body);

        let message: string | null = null;

        if (event === 'opened') {
            message = `üì≤ *MT5* ‚Äî *Ordem ABERTA*\n‚Ä¢ S√≠mbolo: ${symbol}\n‚Ä¢ Lado: ${side} ‚Ä¢ Vol: ${volume}\n‚Ä¢ Pre√ßo: ${price}`;
        } else if (event === 'closed') {
            const pnl = parseFloat(pnlPoints ?? 0);
            const emoji = pnl >= 0 ? "‚úÖ" : "‚ùå";
            message = `üì≤ *MT5* ‚Äî *Ordem FECHADA* ${emoji}\n‚Ä¢ S√≠mbolo: ${symbol}\n‚Ä¢ Resultado: ${pnl} ponto(s)`;
        }

        if (message) {
            // Emite um evento para o servi√ßo de notifica√ß√£o lidar com o envio
            eventBus.emit('notification:send', message);
        }

        res.status(200).json({ ok: true });
    } catch (error: any) {
        logger.error('[Notify Route] Erro ao processar notifica√ß√£o', { error: error?.message });
        res.status(500).json({ ok: false, error: 'Erro interno no servidor' });
    }
});

export const notifyRoutes = router;