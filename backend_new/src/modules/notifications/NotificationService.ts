import { eventBus, EVENTS } from '../../core/eventBus';
import { logger } from '../../core/logger';

// Esta √© uma implementa√ß√£o "mock" do seu servi√ßo de WhatsApp.
// Voc√™ precisar√° integrar sua biblioteca real aqui (ex: venom-bot, whatsapp-web.js)
const sendWhatsAppText = async (message: string) => {
  logger.info(`[WhatsApp] Enviando mensagem: ${message}`);
  // L√ìGICA DE ENVIO REAL AQUI
  return Promise.resolve();
};

const handleTradeExecution = async (payload: any) => {
    const { event, symbol, side, volume, price, pnlPoints } = payload;

    if (event === 'opened') {
        const msg = `üì≤ *MT5* ‚Äî *Ordem ABERTA*\n‚Ä¢ S√≠mbolo: ${symbol}\n‚Ä¢ Lado: ${side} ‚Ä¢ Vol: ${volume}\n‚Ä¢ Pre√ßo: ${price}`;
        await sendWhatsAppText(msg);
    } else if (event === 'closed') {
        const emoji = pnlPoints >= 0 ? "‚úÖ" : "‚ùå";
        const msg = `üì≤ *MT5* ‚Äî *Ordem FECHADA* ${emoji}\n‚Ä¢ S√≠mbolo: ${symbol}\n‚Ä¢ Resultado: ${pnlPoints} ponto(s)`;
        await sendWhatsAppText(msg);
    }
};

export const initNotificationService = () => {
  // Escuta por eventos de trade executado para enviar notifica√ß√µes
  eventBus.on(EVENTS.TRADE_EXECUTED, handleTradeExecution);

  // Escuta por requisi√ß√µes da rota /notify original
  // Adicione a rota /notify no seu api.ts e fa√ßa ela emitir este evento
  eventBus.on('notify:trade', handleTradeExecution)

  logger.info('‚úÖ Servi√ßo de Notifica√ß√µes inicializado.');
};