generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Instrument {
  id        Int           @id @default(autoincrement())
  symbol    String        @unique
  name      String
  backtests BacktestRun[]
  candles   Candle[]
  trades    Trade[]
}

model Candle {
  id           Int              @id @default(autoincrement())
  instrumentId Int
  timeframe    String
  time         DateTime
  open         Float
  high         Float
  low          Float
  close        Float
  volume       Float
  instrument   Instrument       @relation(fields: [instrumentId], references: [id])
  indicators   IndicatorValue[]
  patterns     Pattern[]
  signals      Signal[]

  @@unique([instrumentId, timeframe, time], name: "instrument_time_tf_unique")
}

model IndicatorValue {
  id       Int    @id @default(autoincrement())
  candleId Int
  key      String
  value    Float
  candle   Candle @relation(fields: [candleId], references: [id])
}

model Pattern {
  id       Int    @id @default(autoincrement())
  candleId Int
  type     String
  strength Float
  candle   Candle @relation(fields: [candleId], references: [id])
}

model Signal {
  id         Int     @id @default(autoincrement())
  candleId   Int
  signalType String
  side       String
  score      Float?
  reason     String?
  candle     Candle  @relation(fields: [candleId], references: [id])
  exitOf     Trade[] @relation("ExitSignal")
  entryOf    Trade[] @relation("EntrySignal")

  @@unique([candleId, signalType, side], name: "candleId_signalType_side")
  @@index([candleId])
}

model Trade {
  id            Int          @id @default(autoincrement())
  instrumentId  Int
  timeframe     String
  entrySignalId Int
  exitSignalId  Int?
  qty           Int
  entryPrice    Float
  exitPrice     Float?
  pnlPoints     Float?
  pnlMoney      Float?
  backtestRunId Int?
  backtestRun   BacktestRun? @relation(fields: [backtestRunId], references: [id])
  exitSignal    Signal?      @relation("ExitSignal", fields: [exitSignalId], references: [id])
  entrySignal   Signal       @relation("EntrySignal", fields: [entrySignalId], references: [id])
  instrument    Instrument   @relation(fields: [instrumentId], references: [id])
}

model BacktestRun {
  id           Int        @id @default(autoincrement())
  instrumentId Int
  timeframe    String
  startedAt    DateTime   @default(now())
  finishedAt   DateTime?
  params       String
  totalPnL     Float?
  instrument   Instrument @relation(fields: [instrumentId], references: [id])
  trades       Trade[]
}

model TrainingRun {
  id         Int              @id @default(autoincrement())
  startedAt  DateTime         @default(now())
  finishedAt DateTime?
  status     String
  symbol     String?
  timeframe  String?
  lookback   Int?
  horizon    Int?
  slAtr      Float?
  rr         Float?
  epochs     Int?
  batchSize  Int?
  loss       Float?
  accuracy   Float?
  evMean     Float?
  winRate    Float?
  notes      String?
  metrics    TrainingMetric[]
}

model TrainingMetric {
  id        Int         @id @default(autoincrement())
  runId     Int
  t         Int
  loss      Float?
  accuracy  Float?
  ev        Float?
  createdAt DateTime    @default(now())
  run       TrainingRun @relation(fields: [runId], references: [id])
}

model BrokerTask {
  id             String    @id
  agentId        String
  side           String
  symbol         String?
  timeframe      String?
  time           DateTime?
  price          Int?
  volume         Int?
  slPoints       Int?
  tpPoints       Int?
  beAtPoints     Int?
  beOffsetPoints Int?
  comment        String?
  createdAt      DateTime  @default(now())
}

model BrokerExecution {
  id        Int       @id @default(autoincrement())
  taskId    String?
  agentId   String
  side      String
  symbol    String?
  orderId   String?
  status    String?
  time      DateTime?
  price     Int?
  volume    Int?
  pnlPoints Int?
  raw       String?
  createdAt DateTime  @default(now())
}
