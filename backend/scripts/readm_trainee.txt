# Gera candles M5 a partir de M1 + grava sinais em cima de M5
npx ts-node scripts/rebuild-confirmed-signals.ts --symbol WIN --timeframe M5

# Janela específica (recomendado p/ testar)
npx ts-node scripts/rebuild-confirmed-signals.ts --symbol WIN --timeframe M5 --from 2025-08-01 --to 2025-09-04

# Se sua base for grande e você quiser limitar a leitura de M1 (por performance):
npx ts-node scripts/rebuild-confirmed-signals.ts --symbol WIN --timeframe M5 --limit 200000


Sequência de comandos para re-treino “do zero”

(use -X POST sempre que for POST)

(A) Regerar sinais confirmados do histórico
(troque símbolos/TF se precisar)

curl -s -X POST "http://127.0.0.1:4000/admin/signals/backfill?symbol=WIN&timeframe=M5"


(B) Transformar sinais em trades (com TP/SL) em um range amplo

curl -s -X POST "http://127.0.0.1:4000/admin/trades/backfill?symbol=WIN&timeframe=M5&days=365"


(C) (Atalho) Fazer sinais + trades de uma vez

curl -s -X POST "http://127.0.0.1:4000/admin/rebuild/trades?symbol=WIN&timeframe=M5&days=365"


(D) Iniciar o AutoTrainer (seu backend dispara os lotes para o micro-modelo)

curl -s -X POST "http://127.0.0.1:4000/admin/auto-trainer/start"


Checar status:

curl -s "http://127.0.0.1:4000/admin/auto-trainer/status"


Parar, se quiser:

curl -s -X POST "http://127.0.0.1:4000/admin/auto-trainer/stop"


Observação: se esses endpoints do AutoTrainer (/admin/auto-trainer/...) não existirem no seu server.ts, me avise que te mando o bloco para colar (é curto).